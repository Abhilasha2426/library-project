package com.capgemini.librarymanagement.dao;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;

import com.capgemini.librarymanagement.bean.BookInfo;
import com.capgemini.librarymanagement.bean.UserInfoBean;
import com.capgemini.librarymanagement.db.DbStore;
import com.capgemini.librarymanagement.db.DbUser;

public class LibraryBookDaoImpl implements LibraryBookDao{

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public boolean addBook(BookInfo bookInfo, LinkedList ll) {
		boolean isAdded = false;
		LinkedList ll1 = null;
		if (bookInfo != null) {
			ll1 = new LinkedList();
			ll1.add(bookInfo.getBookId());
			for (int i = 0; i < ll.size(); i++) {
				ll1.add(ll.get(i));
			}
			//ll.add(medicineInfoBean.getPrice());
			//ll.add(medicineInfoBean.getTabName());

			if (DbStore.bookDb(ll1)) {
				System.out.println("Book Id "+DbStore.temp1); 
				//System.out.println(" Added");
				isAdded = true;
			}

		}

		return isAdded;
	}

	@Override
	public boolean deleteBook(int id) {
		boolean isDeleted= false;

		if(DbStore.bDb.containsKey(id)) {

			System.out.println("Deleted elemet is "+DbStore.bDb.remove(id));
			isDeleted=true;
		}
		else {
			System.out.println(id + " Book Not Matched ");
		}


		return isDeleted;
		
	}

	public boolean deleteUser(int usrId) {
		boolean isDeleted= false;

		if(DbStore.bDb.containsKey(usrId)) {

			System.out.println("Deleted elemet is "+DbStore.bDb.remove(usrId));
			isDeleted=true;
		}
		else {
			System.out.println(usrId + " User Not Matched ");
		}

		
		return isDeleted;
	}

	@Override
	public boolean addUser(UserInfoBean userInfoBean, LinkedList li) {
		boolean isAdded = false;
		LinkedList ll1 = null;
		if (userInfoBean != null) {
			ll1 = new LinkedList();
			ll1.add(userInfoBean.getUsrId());
			for (int i = 0; i < li.size(); i++) {
				ll1.add(li.get(i));
			}
			//ll.add(medicineInfoBean.getPrice());
			//ll.add(medicineInfoBean.getTabName());

			if (DbStore.bookDb(ll1)) {
				System.out.println("Book Id "+DbStore.temp1); 
				//System.out.println(" Added");
				isAdded = true;
			}

		}

		return isAdded;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public boolean replaceBook(int id) {
		boolean isUpdate = false;
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter input to modify Book details");
		System.out.println("1.Book Name\n2.Author Name\n");
		int ch1 = sc.nextInt();

		if(ch1==1) {
			System.out.println("Enter Book Name ");
			String bookName = sc.next();

			BookInfo bookInfo = new BookInfo();
			bookInfo.setBookName(bookName);
			
			if(DbStore.bDb.containsKey(id)) {
				Set<Integer> keys = DbStore.bDb.keySet();
				Iterator<Integer> it = keys.iterator();
				while (it.hasNext()) {
					Integer integer = it.next();
					if (id==integer) {
						LinkedList res =DbStore.bDb.get(id);
						for (int i = 0; i < res.size(); i++) {
							if(i==0) {
								res.set(i,bookInfo.getBookName());
								isUpdate = true;
							}
						}
						System.out.println(res);
					}

				}
			}
		}
		else if(ch1==2) {
			System.out.println("Enter Author Name ");
			String authName = sc.next();

			BookInfo bookInfo = new BookInfo();
			bookInfo.setBookAuthor(authName);
			
			if(DbStore.bDb.containsKey(id)) {
				Set<Integer> keys = DbStore.bDb.keySet();
				Iterator<Integer> it = keys.iterator();
				while (it.hasNext()) {
					Integer integer = it.next();
					if (id==integer) {
						LinkedList res =DbStore.bDb.get(id);
						for (int i = 0; i < res.size(); i++) {
							if(i==1) {
								res.set(i,bookInfo.getBookAuthor());
								isUpdate = true;
							}
						}
						System.out.println(res);
					}

				}
			}
		}
		return isUpdate;

	}

	

}
